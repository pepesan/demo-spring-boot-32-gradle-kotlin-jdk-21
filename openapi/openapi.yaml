openapi: 3.0.1
info:
  title: Dato API
  description: Dato API Demo
  version: '2.0'
servers:
  - url: http://localhost:8082
    description: Generated server url
tags:
  - name: dato
    description: the dato simple API
  - name: main
    description: Rest API Sample
paths:
  /portatils:
    get:
      tags:
        - portatil-entity-controller
      description: get-portatil
      operationId: getCollectionResource-portatil-get_1
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelPortatil'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelPortatil'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
        - portatil-entity-controller
      description: create-portatil
      operationId: postCollectionResource-portatil-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortatilRequestBody'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPortatil'
  /portatils/{id}:
    get:
      tags:
        - portatil-entity-controller
      description: get-portatil
      operationId: getItemResource-portatil-get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPortatil'
        '404':
          description: Not Found
    put:
      tags:
        - portatil-entity-controller
      description: update-portatil
      operationId: putItemResource-portatil-put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortatilRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPortatil'
        '201':
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPortatil'
        '204':
          description: No Content
    delete:
      tags:
        - portatil-entity-controller
      description: delete-portatil
      operationId: deleteItemResource-portatil-delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
    patch:
      tags:
        - portatil-entity-controller
      description: patch-portatil
      operationId: patchItemResource-portatil-patch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortatilRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPortatil'
        '204':
          description: No Content
  /profile:
    get:
      tags:
        - profile-controller
      operationId: listAllFormsOfMetadata_1
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RepresentationModelObject'
  /profile/portatils:
    get:
      tags:
        - profile-controller
      operationId: descriptor_1_1_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/sobremesas:
    get:
      tags:
        - profile-controller
      operationId: descriptor_1_1_2
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /sobremesas:
    get:
      tags:
        - sobremesa-entity-controller
      description: get-sobremesa
      operationId: getCollectionResource-sobremesa-get_1
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelSobremesa'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelSobremesa'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
        - sobremesa-entity-controller
      description: create-sobremesa
      operationId: postCollectionResource-sobremesa-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SobremesaRequestBody'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelSobremesa'
  /sobremesas/{id}:
    get:
      tags:
        - sobremesa-entity-controller
      description: get-sobremesa
      operationId: getItemResource-sobremesa-get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelSobremesa'
        '404':
          description: Not Found
    put:
      tags:
        - sobremesa-entity-controller
      description: update-sobremesa
      operationId: putItemResource-sobremesa-put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SobremesaRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelSobremesa'
        '201':
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelSobremesa'
        '204':
          description: No Content
    delete:
      tags:
        - sobremesa-entity-controller
      description: delete-sobremesa
      operationId: deleteItemResource-sobremesa-delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
    patch:
      tags:
        - sobremesa-entity-controller
      description: patch-sobremesa
      operationId: patchItemResource-sobremesa-patch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SobremesaRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelSobremesa'
        '204':
          description: No Content
  /api/v1/dato/{id}:
    get:
      tags:
        - dato
      summary: show a dato object by id
      description: show a dato object by identifier
      operationId: showDatoById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Dato'
            application/json:
              schema:
                $ref: '#/components/schemas/Dato'
        '404':
          description: Invalid input
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
        - dato
      summary: update a dato object by id
      description: update a dato object by identifier
      operationId: editDatoById
      parameters:
        - name: id
          in: path
          description: id user object
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatoDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Dato'
            application/json:
              schema:
                $ref: '#/components/schemas/Dato'
        '404':
          description: Invalid input
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
        - dato
      summary: delete a dato object by id
      description: delete a dato object by identifier
      operationId: deleteDatoById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Dato'
            application/json:
              schema:
                $ref: '#/components/schemas/Dato'
        '404':
          description: Object not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/alumnos/{id}:
    get:
      tags:
        - alumno-controller
      operationId: getAlumnoById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    put:
      tags:
        - alumno-controller
      operationId: updateAlumno
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    delete:
      tags:
        - alumno-controller
      operationId: deleteAlumno
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /alumnos/{id}:
    get:
      tags:
        - alumno-controller
      operationId: getAlumnoById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    put:
      tags:
        - alumno-controller
      operationId: updateAlumno_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    delete:
      tags:
        - alumno-controller
      operationId: deleteAlumno_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /alumnos-repository/{id}:
    get:
      tags:
        - alumno-repository-controller
      operationId: getAlumnoById_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    put:
      tags:
        - alumno-repository-controller
      operationId: updateAlumno_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    delete:
      tags:
        - alumno-repository-controller
      operationId: deleteAlumno_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /api/v1/alumnos-repository/{id}:
    get:
      tags:
        - alumno-repository-controller
      operationId: getAlumnoById_3
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    put:
      tags:
        - alumno-repository-controller
      operationId: updateAlumno_3
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
    delete:
      tags:
        - alumno-repository-controller
      operationId: deleteAlumno_3
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /api/v1/dato/response:
    get:
      tags:
        - dato
      operationId: indexResponse_1
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dato'
    post:
      tags:
        - dato
      operationId: addDatoResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Dato'
  /api/v1/dato/:
    get:
      tags:
        - dato
      summary: show list of dato objects
      description: Shows a list of dato in an output array
      operationId: index_6
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dato'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dato'
    post:
      tags:
        - dato
      summary: add a dato object
      description: add a dato object with a string input of 80 max characters
      operationId: addDato
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatoDTO'
        required: true
      responses:
        '200':
          description: Dato added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dato'
            application/xml:
              schema:
                $ref: '#/components/schemas/Dato'
  /alumnos/:
    get:
      tags:
        - alumno-controller
      operationId: getAlumnos
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alumno'
    post:
      tags:
        - alumno-controller
      operationId: createAlumno
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /api/v1/alumnos/:
    get:
      tags:
        - alumno-controller
      operationId: getAlumnos_1
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alumno'
    post:
      tags:
        - alumno-controller
      operationId: createAlumno_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /alumnos-repository/:
    get:
      tags:
        - alumno-repository-controller
      operationId: getAlumnos_2
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alumno'
    post:
      tags:
        - alumno-repository-controller
      operationId: createAlumno_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /api/v1/alumnos-repository/:
    get:
      tags:
        - alumno-repository-controller
      operationId: getAlumnos_3
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alumno'
    post:
      tags:
        - alumno-repository-controller
      operationId: createAlumno_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlumnoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Alumno'
  /dato-simple:
    get:
      tags:
        - dato
      operationId: index
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Dato'
  /dato-response:
    get:
      tags:
        - dato
      operationId: indexResponse
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Dato'
  /dato-json:
    get:
      tags:
        - dato
      operationId: indexJson
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /api/v1/onetoonebi/address:
    get:
      tags:
        - one-to-one-bidirectional-controller
      operationId: indexAddress
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
  /api/v1/onetoonebi/:
    get:
      tags:
        - one-to-one-bidirectional-controller
      operationId: index_1
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /api/v1/onetoone/:
    get:
      tags:
        - one-to-one-controller
      operationId: index_2
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phone'
  /api/v1/onetomany/:
    get:
      tags:
        - one-to-many-controller
      operationId: index_3
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gender'
  /api/v1/manytomanyuni/:
    get:
      tags:
        - many-to-many-unidirectional-controller
      operationId: index_4
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Noticia'
  /api/v1/manytomany/roles:
    get:
      tags:
        - many-to-many-bidirectional-controller
      operationId: indexRoles
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/manytomany/:
    get:
      tags:
        - many-to-many-bidirectional-controller
      operationId: index_5
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /main/:
    get:
      tags:
        - main
      operationId: main
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /api/v1/main/:
    get:
      tags:
        - main
      operationId: main_1
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /:
    get:
      tags:
        - main
      operationId: main_2
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /api/v1/dato/clear:
    get:
      tags:
        - dato
      operationId: clear
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dato'
components:
  schemas:
    AbstractJsonSchemaPropertyObject:
      type: object
      properties:
        title:
          type: string
        readOnly:
          type: boolean
    Item:
      type: object
      properties:
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
    JsonSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
        definitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Item'
        type:
          type: string
        $schema:
          type: string
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    RepresentationModelObject:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
    EntityModelPortatil:
      required:
        - duracionBateria
        - peso
      type: object
      properties:
        peso:
          type: number
          format: double
        duracionBateria:
          type: integer
          format: int32
        _links:
          $ref: '#/components/schemas/Links'
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    PagedModelEntityModelPortatil:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            portatils:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelPortatil'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EntityModelSobremesa:
      required:
        - tieneMonitor
      type: object
      properties:
        tipoTorre:
          type: string
        tieneMonitor:
          type: boolean
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelSobremesa:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            sobremesas:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelSobremesa'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    PortatilRequestBody:
      required:
        - duracionBateria
        - peso
      type: object
      properties:
        peso:
          type: number
          format: double
        duracionBateria:
          type: integer
          format: int32
    SobremesaRequestBody:
      required:
        - tieneMonitor
      type: object
      properties:
        tipoTorre:
          type: string
        tieneMonitor:
          type: boolean
    DatoDTO:
      required:
        - cadena
      type: object
      properties:
        cadena:
          type: string
      description: Created user object
    ErrorMessage:
      required:
        - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        description:
          type: string
    Dato:
      required:
        - cadena
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        cadena:
          type: string
    AlumnoDTO:
      required:
        - apellidos
        - edad
        - nombre
      type: object
      properties:
        nombre:
          maxLength: 20
          minLength: 3
          type: string
        apellidos:
          type: string
        edad:
          minimum: 18
          type: integer
          format: int32
    Alumno:
      required:
        - apellidos
        - edad
        - id
        - nombre
      type: object
      properties:
        id:
          type: integer
          format: int64
        nombre:
          maxLength: 20
          minLength: 3
          type: string
        apellidos:
          type: string
        edad:
          minimum: 18
          type: integer
          format: int32
    Address:
      type: object
      properties:
        street:
          type: string
        order:
          $ref: '#/components/schemas/Order'
    Order:
      type: object
      properties:
        code:
          type: string
        billingAddress:
          $ref: '#/components/schemas/Address'
    Phone:
      type: object
      properties:
        number:
          type: string
        details:
          $ref: '#/components/schemas/PhoneDetails'
    PhoneDetails:
      type: object
      properties:
        provider:
          type: string
        technology:
          type: string
    Book:
      type: object
      properties:
        title:
          type: string
    Gender:
      required:
        - books
      type: object
      properties:
        name:
          type: string
        books:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Etiqueta:
      type: object
      properties:
        nombre:
          type: string
    Noticia:
      required:
        - etiquetas
      type: object
      properties:
        titulo:
          type: string
        etiquetas:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Etiqueta'
    Role:
      required:
        - users
      type: object
      properties:
        name:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      required:
        - roles
      type: object
      properties:
        firstName:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
